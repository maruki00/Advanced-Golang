package main

import (
	"fmt"
	"github.com/google/wire"
)

// Logger is a simple service that logs messages.
type Logger struct{}

// NewLogger creates a new Logger instance.
func NewLogger() *Logger {
	return &Logger{}
}

// Log is a method on Logger that logs a message.
func (l *Logger) Log(message string) {
	fmt.Println("LOG:", message)
}

// UserService depends on Logger to log user-related actions.
type UserService struct {
	Logger *Logger
}

// NewUserService creates a new UserService with a Logger.
func NewUserService(logger *Logger) *UserService {
	return &UserService{Logger: logger}
}

// CreateUser simulates creating a user and logging the event.
func (s *UserService) CreateUser(name string) {
	s.Logger.Log("Creating user: " + name)
	fmt.Printf("User %s created successfully!\n", name)
}

// Application depends on UserService to perform user-related actions.
type Application struct {
	UserService *UserService
}

// NewApplication creates a new Application instance.
func NewApplication(userService *UserService) *Application {
	return &Application{UserService: userService}
}

// Run simulates running the application by creating a user.
func (app *Application) Run() {
	app.UserService.CreateUser("John Doe")
}

// Initialize the wire provider set.
var mySet = wire.NewSet(
	NewLogger,
	NewUserService,
	NewApplication,
)

func main() {
	// Wire everything together
	app := InitializeApplication()
	app.Run()
}

// InitializeApplication is a wire injector function generated by wire.
func InitializeApplication() *Application {
	wire.Build(mySet)
	return &Application{}
}
